@prefix brick: <https://brickschema.org/schema/Brick#> .
@prefix csvw: <http://www.w3.org/ns/csvw#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .
@prefix dcmitype: <http://purl.org/dc/dcmitype/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prof: <http://www.w3.org/ns/dx/prof/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qb: <http://purl.org/linked-data/cube#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rml: <http://w3id.org/rml/> .
@prefix schema: <https://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sosa: <http://www.w3.org/ns/sosa/> .
@prefix ssn: <http://www.w3.org/ns/ssn/> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix wgs: <https://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://schema.org/RMLFunctionExecutionShape> a sh:NodeShape ;
    sh:description """
    Represents a Function Execution.
    """ ;
    sh:name "rml:FunctionExecution" ;
    sh:property [ sh:description """
        Exactly one rml:function or rml:functionMap is required.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        Exactly one rml:function or rml:functionMap is required.
        """ ;
            sh:minCount 1 ;
            sh:name "rml:function/rml:functionMap" ;
            sh:path [ sh:alternativePath ( rml:function rml:functionMap ) ] ],
        [ sh:description """
        FnO function to execute.
        """ ;
            sh:message """
        rml:functionMap must be an IRI or Blank node.
        """ ;
            sh:name "rml:functionMap" ;
            sh:node <http://schema.org/RMLFunctionMap> ;
            sh:nodeKind sh:BlankNodeOrIRI ;
            sh:path rml:functionMap ],
        [ sh:description """
        FnO function to execute.
        """ ;
            sh:message """
        rml:function must be an IRI.
        """ ;
            sh:name "rml:function" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:function ],
        [ sh:description """
        Input parameters for the function.
        """ ;
            sh:message """
        rml:input must be an IRI or Blank node.
        """ ;
            sh:name "rml:input" ;
            sh:nodeKind sh:BlankNodeOrIRI ;
            sh:path rml:input ] ;
    sh:targetObjectsOf rml:functionExecution .

<http://schema.org/RMLFunctionMapShape> a sh:NodeShape ;
    sh:description """
    Represents a function map.
    """ ;
    sh:name "rml:FunctionMap" ;
    sh:property [ sh:description """
        A property for indicating whether a term map is a constant-valued term 
        map.
        """ ;
            sh:message """
        rml:constant must be an IRI.
        """ ;
            sh:name "rml:constant" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:constant ],
        [ sh:description """
        An IRI indicating whether subject or object generated using the value 
        from column name specified should be an IRI reference, blank node,
        or a Literal.
        """ ;
            sh:in ( rml:IRI ) ;
            sh:maxCount 1 ;
            sh:message """
        rml:termType must be either rml:IRI for an rml:ReturnMap.
        May only be provided once.
        """ ;
            sh:name "rml:termType" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:termType ],
        [ sh:description """
        A logical target is any target to where generated RDF triples are
        exported to.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        Zero or one rml:logicalTarget is required to export RDF triples.
        """ ;
            sh:minCount 0 ;
            sh:name "rml:logicalTarget" ;
            sh:nodeKind sh:BlankNodeOrIRI ;
            sh:path rml:logicalTarget ] ;
    sh:targetObjectsOf rml:functionMap .

<http://schema.org/RMLInputShape> a sh:NodeShape ;
    sh:description """
    Represents an Input for a function.
    """ ;
    sh:name "rml:Input" ;
    sh:property [ sh:description """
        Exactly one rml:parameter or rml:parameterMap is required.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        Exactly one rml:parameter or rml:parameterMap is required.
        """ ;
            sh:minCount 1 ;
            sh:name "rml:parameter/rml:parameterMap" ;
            sh:path [ sh:alternativePath ( rml:parameter rml:parameterMap ) ] ],
        [ sh:description """
        Values of the parameters.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        rml:inputValueMap must be an IRI or Blank node, provided once.
        """ ;
            sh:name "rml:inputValueMap" ;
            sh:nodeKind sh:BlankNodeOrIRI ;
            sh:path rml:inputValueMap ],
        [ sh:datatype xsd:string ;
            sh:description """
        Parameters to supply to FnO function.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        rml:inputValue must be a string Literal.
        """ ;
            sh:name "rml:inputValue" ;
            sh:nodeKind sh:Literal ;
            sh:path rml:inputValue ],
        [ sh:description """
        Parameters to supply to FnO function.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        rml:parameterMap must be an IRI or Blank node.
        """ ;
            sh:name "rml:parameterMap" ;
            sh:node <http://schema.org/RMLParameterMap> ;
            sh:nodeKind sh:BlankNodeOrIRI ;
            sh:path rml:parameterMap ],
        [ sh:description """
        Parameters to supply to FnO function.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        rml:parameter must be an IRI.
        """ ;
            sh:name "rml:parameter" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:parameter ],
        [ sh:description """
        Exactly one rml:inputValue or rml:inputValueMap is required.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        Exactly one rml:inputValue or rml:inputValueMap is required.
        """ ;
            sh:minCount 1 ;
            sh:name "rml:inputValue/rml:inputValueMap" ;
            sh:path [ sh:alternativePath ( rml:inputValue rml:inputValueMap ) ] ] ;
    sh:targetObjectsOf rml:input .

<http://schema.org/RMLParameterMapShape> a sh:NodeShape ;
    sh:description """
    Represents a paramter map of a function.
    """ ;
    sh:name "rml:ParameterMap" ;
    sh:property [ sh:description """
        A property for indicating whether a term map is a constant-valued term 
        map.
        """ ;
            sh:message """
        rml:constant must be an IRI.
        """ ;
            sh:name "rml:constant" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:constant ],
        [ sh:description """
        An IRI indicating whether subject or object generated using the value 
        from column name specified should be an IRI reference, blank node,
        or a Literal.
        """ ;
            sh:in ( rml:IRI ) ;
            sh:maxCount 1 ;
            sh:message """
        rml:termType must be either rml:IRI for an rml:ReturnMap.
        May only be provided once.
        """ ;
            sh:name "rml:termType" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:termType ],
        [ sh:description """
        A logical target is any target to where generated RDF triples are
        exported to.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        Zero or one rml:logicalTarget is required to export RDF triples.
        """ ;
            sh:minCount 0 ;
            sh:name "rml:logicalTarget" ;
            sh:nodeKind sh:BlankNodeOrIRI ;
            sh:path rml:logicalTarget ] ;
    sh:targetObjectsOf rml:parameterMap .

<http://schema.org/RMLReturnMapShape> a sh:NodeShape ;
    sh:description """
    Represents a return map.
    """ ;
    sh:name "rml:ReturnMap" ;
    sh:property [ sh:description """
        A property for indicating whether a term map is a constant-valued term 
        map.
        """ ;
            sh:message """
        rml:constant must be an IRI.
        """ ;
            sh:name "rml:constant" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:constant ],
        [ sh:description """
        An IRI indicating whether subject or object generated using the value 
        from column name specified should be an IRI reference, blank node,
        or a Literal.
        """ ;
            sh:in ( rml:IRI ) ;
            sh:maxCount 1 ;
            sh:message """
        rml:termType must be either rml:IRI for an rml:ReturnMap.
        May only be provided once.
        """ ;
            sh:name "rml:termType" ;
            sh:nodeKind sh:IRI ;
            sh:path rml:termType ],
        [ sh:description """
        A logical target is any target to where generated RDF triples are
        exported to.
        """ ;
            sh:maxCount 1 ;
            sh:message """
        Zero or one rml:logicalTarget is required to export RDF triples.
        """ ;
            sh:minCount 0 ;
            sh:name "rml:logicalTarget" ;
            sh:nodeKind sh:BlankNodeOrIRI ;
            sh:path rml:logicalTarget ] ;
    sh:targetObjectsOf rml:returnMap .

<http://www.w3.org/ns/shacl-shacl#> rdfs:label "SHACL for SHACL"@en ;
    rdfs:comment "This shapes graph can be used to validate SHACL shapes graphs against a subset of the SHACL syntax rules."@en ;
    sh:declare [ sh:namespace "http://www.w3.org/ns/shacl-shacl#" ;
            sh:prefix "shsh" ] .

<http://www.w3.org/ns/shacl-shacl#EntailmentShape> a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:targetObjectsOf sh:entailment .

<http://www.w3.org/ns/shacl-shacl#ShapesGraphShape> a sh:NodeShape ;
    sh:nodeKind sh:IRI ;
    sh:targetObjectsOf sh:shapesGraph .

<http://www.w3.org/ns/shacl-shacl#ShapesListShape> a sh:NodeShape ;
    sh:property [ sh:node <http://www.w3.org/ns/shacl-shacl#ShapeShape> ;
            sh:path ( [ sh:zeroOrMorePath rdf:rest ] rdf:first ) ] ;
    sh:targetObjectsOf sh:and,
        sh:or,
        sh:xone .

<http://www.w3.org/ns/shacl-shacl#ListNodeShape> a sh:NodeShape ;
    rdfs:label "List node shape"@en ;
    rdfs:comment "Defines constraints on what it means for a node to be a node within a well-formed RDF list. Note that this does not check whether the rdf:rest items are also well-formed lists as this would lead to unsupported recursion."@en ;
    sh:or ( [ sh:hasValue () ;
                sh:property [ sh:maxCount 0 ;
                        sh:path rdf:first ],
                    [ sh:maxCount 0 ;
                        sh:path rdf:rest ] ] [ sh:not [ sh:hasValue () ] ;
                sh:property [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:path rdf:rest ],
                    [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:path rdf:first ] ] ) .

<http://www.w3.org/ns/shacl-shacl#NodeShapeShape> a sh:NodeShape ;
    sh:property [ sh:maxCount 0 ;
            sh:path sh:path ],
        [ sh:maxCount 0 ;
            sh:path sh:lessThan ],
        [ sh:maxCount 0 ;
            sh:path sh:lessThanOrEquals ],
        [ sh:maxCount 0 ;
            sh:path sh:maxCount ],
        [ sh:maxCount 0 ;
            sh:path sh:minCount ],
        [ sh:maxCount 0 ;
            sh:path sh:qualifiedValueShape ],
        [ sh:maxCount 0 ;
            sh:path sh:uniqueLang ] ;
    sh:targetObjectsOf sh:node .

<http://www.w3.org/ns/shacl-shacl#PathNodeShape> sh:xone ( [ sh:nodeKind sh:IRI ] [ sh:node <http://www.w3.org/ns/shacl-shacl#PathListWithAtLeast2Members> ;
                sh:nodeKind sh:BlankNode ] [ sh:closed true ;
                sh:nodeKind sh:BlankNode ;
                sh:property [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:node <http://www.w3.org/ns/shacl-shacl#PathListWithAtLeast2Members> ;
                        sh:path sh:alternativePath ] ] [ sh:closed true ;
                sh:nodeKind sh:BlankNode ;
                sh:property [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:path sh:inversePath ] ] [ sh:closed true ;
                sh:nodeKind sh:BlankNode ;
                sh:property [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:path sh:zeroOrMorePath ] ] [ sh:closed true ;
                sh:nodeKind sh:BlankNode ;
                sh:property [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:path sh:oneOrMorePath ] ] [ sh:closed true ;
                sh:nodeKind sh:BlankNode ;
                sh:property [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:path sh:zeroOrOnePath ] ] ) .

<http://www.w3.org/ns/shacl-shacl#PathShape> a sh:NodeShape ;
    rdfs:label "Path shape"@en ;
    rdfs:comment "A shape that can be used to validate the syntax rules of well-formed SHACL paths."@en ;
    rdfs:seeAlso <https://www.w3.org/TR/shacl/#property-paths> ;
    sh:property [ sh:node <http://www.w3.org/ns/shacl-shacl#PathNodeShape> ;
            sh:path [ sh:zeroOrMorePath [ sh:alternativePath ( ( [ sh:zeroOrMorePath rdf:rest ] rdf:first ) ( sh:alternativePath [ sh:zeroOrMorePath rdf:rest ] rdf:first ) sh:inversePath sh:zeroOrMorePath sh:oneOrMorePath sh:zeroOrOnePath ) ] ] ] .

<http://www.w3.org/ns/shacl-shacl#PropertyShapeShape> a sh:NodeShape ;
    sh:property [ sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:node <http://www.w3.org/ns/shacl-shacl#PathShape> ;
            sh:path sh:path ] ;
    sh:targetObjectsOf sh:property .

<http://www.w3.org/ns/shacl-shacl#ShapeShape> a sh:NodeShape ;
    rdfs:label "Shape shape"@en ;
    rdfs:comment "A shape that can be used to validate syntax rules for other shapes."@en ;
    sh:or ( [ sh:not [ sh:class rdfs:Class ;
                        sh:or ( [ sh:class sh:NodeShape ] [ sh:class sh:PropertyShape ] ) ] ] [ sh:nodeKind sh:IRI ] ) ;
    sh:property [ sh:nodeKind sh:IRIOrLiteral ;
            sh:path sh:targetNode ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:targetClass ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:targetSubjectsOf ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:targetObjectsOf ],
        [ sh:maxCount 1 ;
            sh:nodeKind sh:IRI ;
            sh:path sh:severity ],
        [ sh:or ( [ sh:datatype xsd:string ] [ sh:datatype rdf:langString ] ) ;
            sh:path sh:message ],
        [ sh:in ( true false ) ;
            sh:maxCount 1 ;
            sh:path sh:deactivated ],
        [ sh:node <http://www.w3.org/ns/shacl-shacl#ListShape> ;
            sh:path sh:and ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:class ],
        [ sh:datatype xsd:boolean ;
            sh:maxCount 1 ;
            sh:path sh:closed ],
        [ sh:maxCount 1 ;
            sh:node <http://www.w3.org/ns/shacl-shacl#ListShape> ;
            sh:path sh:ignoredProperties ],
        [ sh:nodeKind sh:IRI ;
            sh:path ( sh:ignoredProperties [ sh:zeroOrMorePath rdf:rest ] rdf:first ) ],
        [ sh:maxCount 1 ;
            sh:nodeKind sh:IRI ;
            sh:path sh:datatype ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:disjoint ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:equals ],
        [ sh:maxCount 1 ;
            sh:node <http://www.w3.org/ns/shacl-shacl#ListShape> ;
            sh:path sh:in ],
        [ sh:maxCount 1 ;
            sh:node <http://www.w3.org/ns/shacl-shacl#ListShape> ;
            sh:path sh:languageIn ],
        [ sh:datatype xsd:string ;
            sh:path ( sh:languageIn [ sh:zeroOrMorePath rdf:rest ] rdf:first ) ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:lessThan ],
        [ sh:nodeKind sh:IRI ;
            sh:path sh:lessThanOrEquals ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:path sh:maxCount ],
        [ sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path sh:maxExclusive ],
        [ sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path sh:maxInclusive ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:path sh:maxLength ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:path sh:minCount ],
        [ sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path sh:minExclusive ],
        [ sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path sh:minInclusive ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:path sh:minLength ],
        [ sh:in ( sh:BlankNode sh:IRI sh:Literal sh:BlankNodeOrIRI sh:BlankNodeOrLiteral sh:IRIOrLiteral ) ;
            sh:maxCount 1 ;
            sh:path sh:nodeKind ],
        [ sh:node <http://www.w3.org/ns/shacl-shacl#ListShape> ;
            sh:path sh:or ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:path sh:pattern ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:path sh:flags ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:path sh:qualifiedMaxCount ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:path sh:qualifiedMinCount ],
        [ sh:maxCount 1 ;
            sh:path sh:qualifiedValueShape ],
        [ sh:datatype xsd:boolean ;
            sh:maxCount 1 ;
            sh:path sh:qualifiedValueShapesDisjoint ],
        [ sh:datatype xsd:boolean ;
            sh:maxCount 1 ;
            sh:path sh:uniqueLang ],
        [ sh:node <http://www.w3.org/ns/shacl-shacl#ListShape> ;
            sh:path sh:xone ] ;
    sh:targetClass sh:NodeShape,
        sh:PropertyShape ;
    sh:targetObjectsOf sh:node,
        sh:not,
        sh:property,
        sh:qualifiedValueShape ;
    sh:targetSubjectsOf sh:and,
        sh:class,
        sh:closed,
        sh:datatype,
        sh:disjoint,
        sh:equals,
        sh:flags,
        sh:hasValue,
        sh:ignoredProperties,
        sh:in,
        sh:languageIn,
        sh:lessThan,
        sh:lessThanOrEquals,
        sh:maxCount,
        sh:maxExclusive,
        sh:maxInclusive,
        sh:maxLength,
        sh:minCount,
        sh:minExclusive,
        sh:minInclusive,
        sh:minLength,
        sh:node,
        sh:nodeKind,
        sh:not,
        sh:or,
        sh:pattern,
        sh:property,
        sh:qualifiedMaxCount,
        sh:qualifiedMinCount,
        sh:qualifiedValueShape,
        sh:qualifiedValueShapesDisjoint,
        sh:targetClass,
        sh:targetNode,
        sh:targetObjectsOf,
        sh:targetSubjectsOf,
        sh:uniqueLang,
        sh:xone ;
    sh:xone ( <http://www.w3.org/ns/shacl-shacl#NodeShapeShape> <http://www.w3.org/ns/shacl-shacl#PropertyShapeShape> ) .

<http://www.w3.org/ns/shacl-shacl#PathListWithAtLeast2Members> a sh:NodeShape ;
    sh:node <http://www.w3.org/ns/shacl-shacl#ListShape> ;
    sh:property [ sh:minCount 2 ;
            sh:path [ sh:oneOrMorePath rdf:rest ] ] .

<http://www.w3.org/ns/shacl-shacl#ListShape> a sh:NodeShape ;
    rdfs:label "List shape"@en ;
    rdfs:comment "A shape describing well-formed RDF lists. Currently does not check for non-recursion. This could be expressed using SHACL-SPARQL."@en ;
    rdfs:seeAlso <https://www.w3.org/TR/shacl/#syntax-rule-SHACL-list> ;
    sh:property [ rdfs:comment "Each list member (including this node) must be have the shape shsh:ListNodeShape."@en ;
            sh:hasValue () ;
            sh:node <http://www.w3.org/ns/shacl-shacl#ListNodeShape> ;
            sh:path [ sh:zeroOrMorePath rdf:rest ] ] .

